userprog/addrspace.cc : gère les allocations d'espace.
thread/thread.cc : gère la création, free des threads.
thread/scheduler.cc : gère l'organisation des threads.
thread/sync.cc : gère la synchronisation des threads

action I.1 :
Les threads sont alloués et initialisés dans thread.cc
la pile d'un thread Nachos se trouve dans un espace noyau Nachos


action I.2 :
dans progtest.cc/StartProcess, on crée un objet AddrSpace qui crée un espace mémoire
 pour un programme utilisateur.
On donne cet espace à la variable globale currentThread (system.cc).


action II.2:
-on a commencer par utiliser de simple semaphore afin de mieux comprendre le systeme
- mise en place d'un simple systeme de comptage des thread exit face au thread create=
  mais que va t'il se passé en cas de thread éxit d'un mauvais thread.
- 2block de perdu en memoir et on sait pas pk ni si sa vient de cette partie c'étais peut
etre la des la partie une.sans doute d'ailleur.

action II.3:

quest:
-action 2.2: pk devait t'on inclure synch.CC

-commentaire
-rapport
-getint PutInt
-vérifier les valeur de retour des appels systeme.



partie III

plusieurs espaces d'adressage qui se partagent l'espace disponible
numéros de page traduits en numeros de pages physiques (main memory)
la table des pages fait le lien entre virt mem et phys mem.

dans la partie 1, il faut faire un décalage.
pareil que our les threads, bitmap sur les pages physiques.
souvent dans les systemes la memoire physique est en vrac et des bouts de processus
peuvent etre séparés mais les processus ne le savent pas.

addrspace charge dans la mem physique 1 du code et un bout de données, et dans le slot 2
la fin des données + pile. Donc ca marche pas.

readatvirtual : se faire un tampon, charger grace a readat, ecrire les octets un par un
dans la memoire virtuelle avec writemem. Lent mais ca marche.

action I.2 :
on le voit à machine->memory qui est l'espace mémoire physique.
On passe a readAt un pointeur vers cet espace.







note du prof:
quand on a page provider on va pouvoir stocker les processus a plein d'endroit
partie2: on fait un programme qui fait l'appel system forkexec.
1)on construit l'addresse space
2)on créer un nouveau thread
3)sa ressemble au tp2 pour faire le run du thread mais la on pourra appeler initregister de base car pas meme processus.
si j'apelle halt sa doit arreter toute la machine
si exit juste processus doit la fermé
on part du principe que les thread utilisateur ne feront que threadexit et pas exit





gerer les erreur d'allocation de page
